
import click
from homer.core import Homer



homer = Homer()
homer.mount('./testdir')



# === CLI

@click.group()
def cli():
    """Homer CLI"""
    pass

@cli.command()
def dev():
    """Run in development mode with auto-rebuild on file changes"""
    click.echo("Running project in development mode...")
    click.echo("[DEV] Watching for changes...")

    debounce_delay = 3.0  # seconds
    last_event_time = [0]

    # Files generated by the build should not trigger the watcher
    IGNORED_PATHS = ["build/", "__pycache__", ".git", ".gitignore", ".DS_Store", "build"]
    IGNORED_EXTENSIONS = [".pyc", ".tmp", ".swp", "~", ".sh", ".md", ".txt"]

    class ChangeHandler(FileSystemEventHandler):
        def on_any_event(self, event):
            if event.is_directory:
                return

            path = os.path.abspath(event.src_path)

            # Ignore temporary/irrelevant files
            if any(path.endswith(ext) for ext in IGNORED_EXTENSIONS):
                return
            if any(part in path for part in IGNORED_PATHS):
                return

            # Ignore if no actual change (sometimes OS fires multiple events)
            now = time.time()
            if now - last_event_time[0] < debounce_delay:
                return  # Debounce multiple triggers from same change
            last_event_time[0] = now

            click.echo(f"[DEV] Change detected: {event.src_path}")
            python_exe = sys.executable
            args = [python_exe, __file__, "dev"]
            click.echo(f"[DEV] Restarting: {' '.join(args)}")
            os.execv(python_exe, args)

    observer = Observer()
    handler = ChangeHandler()

    # watch mounted
    # max: this gets triggered by something in index.html (jinja2?)...
    #observer.schedule(handler, path=homer.mounted_dir, recursive=True)

    # watch python script
    observer.schedule(handler, path=".", recursive=False)

    observer.start()

    try:
        homer.build()
        homer.run()
    except KeyboardInterrupt:
        click.echo("[DEV] Shutting down...")
    finally:
        observer.stop()
        observer.join()

@cli.command()
def build():
    """Build the project"""
    click.echo("Building the project...")
    homer.build()

@cli.command()
def run():
    """Run the project"""
    click.echo("Running project...")
    homer.build()
    homer.run()

if __name__ == '__main__':
    cli()
